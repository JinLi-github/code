*** k-mer analysis 

module load kmc/3.2.1  
$ mkdir tmp
$ ls *.fastq > FILES
$ kmc -k21 -t10 -m64 -ci1 -cs10000 @FILES reads tmp/

$ kmc_tools transform reads histogram reads.histo -cx10000


*** hifiasm assembly (-l 0 to 3 for different purge levels)

hifiasm -o Haden -t 12 -l 3 m64310e_230506_034722.hifi_reads.filt.fastq.gz --primary

*** gfa to fa
awk '/^S/{print ">"$2"\n"$3}' Haden.a_ctg.gfa | fold > Haden.a_ctg.fa 


*** HiCanu Assembly

canu -p mango -d haden_hifi genomeSize=350m -pacbio-hifi /blue/xingbo.wu/share/mango/Haden/m64310e_230506_034722.hifi_reads.filt.fastq.gz

*** convert gfa to fasta (-w line width)

awk '/^S/ {print ">"$2"\n"$3}' hifiasm.asm.bp.p_ctg.gfa | seqkit seq -w 60 > Haden.hifi_assembled.fasta

*** ragtag scaffolding

ragtag.py scaffold <reference_genome.fasta> Haden.p_ctg.fa -o Haden_assembly -t 12 


*** A Telomere Identification toolKit (tidk)

conda create -n tidk_env -c bioconda tidk

conda activate tidk_env

tidk search --string AAACCCT --output tidk_output --dir ./ ragtag.scaffold.fasta

** plot
tidk plot --tsv tidk_output_telomeric_repeat_windows.tsv


**** get chr form ragtag.scaffold.fasta

#!/bin/bash

# Create the ./chr directory if it doesn't exist
mkdir -p ./chr

# Loop through chromosome numbers 1 to 20
for i in {1..20}; do
  head -$((2 * i)) ragtag.scaffold.fasta | tail -2 > ./chr/ch$i
done

**** extract sequence containing telomere from fastq file

# Extract lines from FASTQ file
grep -B 1 'AGGGTTTAGGGTTTAGGGTTTAGGGTTT' m64310e_230506_034722.hifi_reads.fastq | sed 's/@/>/g' > ./gggttta/AGGGTTT.fasta
grep -B 1 'AAACCCTAAACCCTAAACCCTAAACCCT' m64310e_230506_034722.hifi_reads.fastq | sed 's/@/>/g' > ./aaaccct/AAACCCT.fasta


**** blast
conda activate blast
makeblastdb -in AGGGTTT.fasta -dbtype nucl -out AGGGTTT_db
blastn -query query.fasta -db AGGGTTT_db -out results.txt -outfmt 6 -evalue 1e-5 -max_target_seqs 10 -num_threads 4

**** extract specific sequence from fasta
grep -A 1 "m64310e_230506_034722/132711129/ccs" AGGGTTT.fasta


**** download sequence from SRA using SRA Toolkit

bin/vdb-config -i

bin/fastq-dump SRRXXXXXXX


**** minimap2 alignment 

# Align PacBio long reads to the reference genome
minimap2 -ax map-pb -t 10 ./haden_modified.fasta /blue/xingbo.wu/jinli/mango/haden/haden_hicanu/m64310e_230506_034722.hifi_reads.fastq > aligned.sam

# Convert SAM to BAM format
samtools view -Sb aligned.sam > aligned.bam

# Sort the BAM file
samtools sort aligned.bam -o aligned.sorted.bam

# Index the sorted BAM file
samtools index aligned.sorted.bam

*** to get paf

minimap2 -x asm5 -c reference.fasta query.fasta > alignment.paf


*** dot plot visualization with paft in R

alignment <- read_paf( system.file("extdata", "fungi.paf", package="pafr") )

dotplot(alignment, label_seqs=TRUE, order_by="qstart") + theme_bw()


*** D-Genies big genome alignment

**** annotation

*** repeatmodeler + repeatmasker

# Set paths to your input fil	es and output directories
INPUT_GENOME="haden_modified.fasta"
OUTPUT_DIR="Repeat_result"
DB_NAME="mango_haden"

# Step 1: Build the RepeatModeler database
BuildDatabase -name $DB_NAME -engine ncbi $INPUT_GENOME

# Step 2: Run RepeatModeler to build the custom repeat library
RepeatModeler -pa 60 -database $DB_NAME -LTRStruct 

# Step 3: Run RepeatMasker for masking small repeats
RepeatMasker -pa 60 \
-e rmblast -lib $DB_NAME-families.fa \
-xsmall -gff -dir $OUTPUT_DIR $INPUT_GENOME

*** edta repeats

EDTA.pl --genome haden_modified.fasta --sensitive 1 --anno 1 --evaluate 1 --threads 60 --force 1

** (try) -hardmask 0

** softmask 

RepeatMasker -pa 8 -lib haden_modified.fasta.mod.EDTA.TElib.fa -xsmall -dir ./softmask haden_modified.fasta

** alternate

conda create -n EDTA
conda activate EDTA
git clone https://github.com/oushujun/EDTA.git

perl ./EDTA/util/make_masked.pl -genome /blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/edta/haden_modified.fasta -minlen 80 -hardmask 0 -t 2 -rmout /blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/edta/haden_modified.fasta.mod.EDTA.anno/haden_modified.fasta.mod.EDTA.TEanno.out 

*** funannotate (failed) 

funannotate predict -i genome.fasta --species "Mango haden" --maker_gff my_previous_maker.gff

*** BRAKER 3

module load braker/3.0.8

export
AUGUSTUS_CONFIG_PATH=/blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/repeatmodeler/Repeat_result/braker3/config

braker.pl --genome=/blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/repeatmodeler/Repeat_result/braker3/haden_modified.fasta.masked --prot_seq=/blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/edta/funannotate/GWHEQCT00000000.Protein.faa --threads=$SLURM_CPUS_PER_TASK

** merge chr.fasta to genome.fasta

cat chr1.fasta chr2.fasta chr3.fasta chr4.fasta chr5.fasta chr6.fasta chr7.fasta chr8.fasta chr9.fasta chr10.fasta chr11.fasta chr12.fasta chr13.fasta chr14.fasta chr15.fasta chr16.fasta chr17.fasta chr18.fasta chr19.fasta chr20.fasta > combined.fasta




** rename chromosome name 

sed -i 's/>GWHEQCT00000001_RagTag/>Haden_Chr1/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000002_RagTag/>Haden_Chr2/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000003_RagTag/>Haden_Chr3/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000004_RagTag/>Haden_Chr4/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000005_RagTag/>Haden_Chr5/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000006_RagTag/>Haden_Chr6/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000007_RagTag/>Haden_Chr7/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000008_RagTag/>Haden_Chr8/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000009_RagTag/>Haden_Chr9/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000010_RagTag/>Haden_Chr10/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000011_RagTag/>Haden_Chr11/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000012_RagTag/>Haden_Chr12/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000013_RagTag/>Haden_Chr13/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000014_RagTag/>Haden_Chr14/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000015_RagTag/>Haden_Chr15/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000016_RagTag/>Haden_Chr16/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000017_RagTag/>Haden_Chr17/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000018_RagTag/>Haden_Chr18/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000019_RagTag/>Haden_Chr19/' haden_modified.fasta.masked
sed -i 's/>GWHEQCT00000020_RagTag/>Haden_Chr20/' haden_modified.fasta.masked



**** agat_sq_stat_basic.pl gtf summary

module load agat

$ssembly/repeatmodeler/Repeat_result/braker3/haden_modified.fasta.masked -o mango_haden_gtf_agat_summary


**** busco 

** list all databases

busco --list-datasets

** run busco on protein fasta

busco -i /blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/repeatmodeler/Repeat_result/braker3/braker/braker.aa -l embryophyta_odb10 -o busco_output -m protein

**** quast

quast -o quast_output /blue/xingbo.wu/jinli/mango/haden/Solved_chr/primary_assembly/repeatmodeler/Repeat_result/braker3/haden_modified.fasta.masked


**** plotsr generates high-quality visualisation of synteny and structural rearrangements between multiple genomes

*** alignment 

# Load the required modules
module load minimap2
module load samtools

# Step 1: Align irwin.genome.fasta to haden.genome.fasta
echo "Aligning irwin.genome.fasta to haden.genome.fasta..."
minimap2 -ax asm5 -t 14 --eqx irwin.genome.fasta haden.genome.fasta | samtools sort -O BAM - > alignment/irwin_haden.bam
samtools index alignment/irwin_haden.bam

# Step 2: Align haden.genome.fasta to xiangyahong.genome.fasta
echo "Aligning haden.genome.fasta to xiangyahong.genome.fasta..."
minimap2 -ax asm5 -t 14 --eqx haden.genome.fasta xiangyahong.genome.fasta | samtools sort -O BAM - > alignment/haden_xiangyahong.bam
samtools index alignment/haden_xiangyahong.bam

# Step 3: Align xiangyahong.genome.fasta to odorata.genome.fasta
echo "Aligning xiangyahong.genome.fasta to odorata.genome.fasta..."
minimap2 -ax asm5 -t 14 --eqx xiangyahong.genome.fasta odorata.genome.fasta | samtools sort -O BAM - > alignment/xiangyahong_odorata.bam
samtools index alignment/xiangyahong_odorata.bam

# Step 4: Align odorata.genome.fasta to carabao.genome.fasta
echo "Aligning odorata.genome.fasta to carabao.genome.fasta..."
minimap2 -ax asm5 -t 14 --eqx odorata.genome.fasta carabao.genome.fasta | samtools sort -O BAM - > alignment/odorata_carabao.bam
samtools index alignment/odorata_carabao.bam

# Step 5: Align carabao.genome.fasta to alampur.genome.fasta
echo "Aligning carabao.genome.fasta to alampur.genome.fasta..."
minimap2 -ax asm5 -t 14 --eqx carabao.genome.fasta alampur.genome.fasta | samtools sort -O BAM - > alignment/carabao_alampur.bam
samtools index alignment/carabao_alampur.bam

# Step 6: Align alampur.genome.fasta to safeda.genome.fasta
echo "Aligning alampur.genome.fasta to safeda.genome.fasta..."
minimap2 -ax asm5 -t 14 --eqx alampur.genome.fasta safeda.genome.fasta | samtools sort -O BAM - > alignment/alampur_safeda.bam
samtools index alignment/alampur_safeda.bam

echo "All alignments are complete!"


*** syri finding structural annotations between genomes

# Load the required modules
module load syri/1.5.4

# Running syri for finding structural rearrangements between irwin and haden
syri -c irwin_haden.bam -r irwin.genome.fasta -q haden.genome.fasta -F B --prefix syri/irwin_haden &

# Running syri for finding structural rearrangements between haden and xiangyahong
syri -c haden_xiangyahong.bam -r haden.genome.fasta -q xiangyahong.genome.fasta -F B --prefix syri/haden_xiangyahong &

# Running syri for finding structural rearrangements between xiangyahong and odorata
syri -c xiangyahong_odorata.bam -r xiangyahong.genome.fasta -q odorata.genome.fasta -F B --prefix syri/xiangyahong_odorata &

# Running syri for finding structural rearrangements between odorata and carabao
syri -c odorata_carabao.bam -r odorata.genome.fasta -q carabao.genome.fasta -F B --prefix syri/odorata_carabao &

# Running syri for finding structural rearrangements between carabao and alampur
syri -c carabao_alampur.bam -r carabao.genome.fasta -q alampur.genome.fasta -F B --prefix syri/carabao_alampur &

# Running syri for finding structural rearrangements between alampur and safeda
syri -c alampur_safeda.bam -r alampur.genome.fasta -q safeda.genome.fasta -F B --prefix syri/alampur_safeda &

*** sort syri output according to chr number

sort -V -k1,1 haden_odoratasyri.out > haden_odoratasyri_sorted.out

*** Running plotsr for visualization 

plotsr \
    --sr ../irwin_hadensyri.out \
    --sr ../haden_odoratasyri.out \
    --sr ../odorata_carabaosyri.out \
    --sr ../carabao_alampursyri.out \
    --sr ../alampur_safedasyri.out \
    --genomes genomes.txt \
    -o mango_pangenome_plot.png


*** genomes.txt file

#file	name	tags
irwin.genome.fasta	Irwin	lw:1.5
haden.genome.fasta	Haden	lw:1.5
odorata.genome.fasta	Odorata	lw:1.5
carabao.genome.fasta	Carabao	lw:1.5
alampur.genome.fasta	Alampur	lw:1.5
safeda.genome.fasta	Safeda	lw:1.5


**** OrthoFinder

*** edit protein.aa sequence name to include accession name

sed -i 's/>g/>alampur_g/' alampur.aa 

*** Extract Longest Isoform from Protein FASTA

cd-hit -i input_protein_sequences.fasta -o longest_isoforms.fasta -c 0.99 -n 5

*** orthofinder 

mkdir mango_orthofinder

cp mango_accession*_longest_isoforms.fasta mango_orthofinder/

orthofinder -f mango_orthofinder -t 8





**** population studies

Tassel missing rate > 0.20 & MAF < 0.05 & accessions with 5% above missing data were removed. 

# Install bcftools if not already installed
module load bcftools

# Filter out multiallelic variants
bcftools view -m2 -M2 -v snps mango_197_filtered_old.vcf -o mango_197_filtered.vcf

*** admixture (chromosome names need to be numbers)

# Load required modules
module load plink
module load admixture

# Input VCF file and output directory
vcf_file="../mango_197_filtered.vcf"
output_dir="/blue/xingbo.wu/jinli/mango/population/structure"

# Step 1: Convert VCF to PLINK binary format (BED, BIM, FAM)
plink2 --vcf $vcf_file --allow-extra-chr --make-bed --out $output_dir/mango_admixture_data

# Step 2: Run ADMIXTURE for K values from 1 to 10
for K in {1..10}; do
  echo "Running ADMIXTURE for K=$K"

  admixture --cv $output_dir/mango_admixture_data.bed $K | tee $output_dir/admixture_log_K${K}.out

  # Capture the cross-validation error from the log
  grep -h "CV error" $output_dir/admixture_log_K${K}.out >> $output_dir/cv_errors.txt

  echo "ADMIXTURE analysis for K=$K completed."
done

# Print out the cross-validation errors for all K values
echo "Cross-validation errors:"
cat $output_dir/cv_errors.txt


*** PCA

# Load required modules
module load plink

# Input VCF file and output directory
vcf_file="../mango_197_filtered.vcf"
output_dir="/blue/xingbo.wu/jinli/mango/population/pca"

# Step 1: Convert VCF to PLINK 2 format
plink2 --vcf $vcf_file --allow-extra-chr --make-bed --out $output_dir/mango_pca_data

# Step 2: Perform PCA analysis with PLINK 2.0
plink2 --bfile $output_dir/mango_pca_data --pca --allow-extra-chr  --out $output_dir/mango_pca_results

echo "PCA analysis completed successfully."



*** phylogenetic tree 

** convert the VCF file into a sequence alignment in PHYLIP format

# Load required modules (if necessary)
module load python

# Set input VCF and output directory
vcf_file="/blue/xingbo.wu/jinli/mango/population/mango_197_filtered.vcf"
alignment_file="mango_197_filtered.min4.phy"

# Step 1: Convert VCF to FASTA
python vcf2phylip.py -i $vcf_file -o $alignment_file

echo "VCF to FASTA conversion completed."

** build up tree 


# Load IQ-TREE module
module load iq-tree/2.2.2.7

# Set input alignment file (PHYLIP format) and output directory
alignment_file="/blue/xingbo.wu/jinli/mango/population/tree/vcf2phylip/mango_197_filtered.min4.phy"
output_dir="/blue/xingbo.wu/jinli/mango/population/tree/phylogeny"

# Step 1: Run IQ-TREE to construct the maximum likelihood phylogenetic tree
iqtree -s $alignment_file -m MFP -bb 1000 -nt AUTO -pre $output_dir/mango_tree

# Explanation of parameters:
# - `-s`: Specifies the input alignment file in PHYLIP format.
# - `-m MFP`: Model Finder Plus, which automatically selects the best substitution model.
# - `-bb 1000`: Perform 1000 ultrafast bootstrap replicates to assess branch support.
# - `-nt AUTO`: Automatically detects and utilizes the available number of threads.
# - `-pre`: Prefix for the output files.

echo "Phylogenetic tree construction completed."






#########

Impatiens

**** Quality Control (FastQC)

# Load FastQC module (if installed as a module on your HPC)
module load fastqc/0.12.1

# Create output directory
mkdir -p fastqc_output

# Define input fastq files
input_files="/blue/xingbo.wu/share/impatiens/213B_Wu_R1/Impatiens_S3_L003_R1_001.fastq.gz /blue/xingbo.wu/share/impatiens/213B_Wu_R2/Impatiens_S3_L003_R2_001.fastq.gz"

# Run FastQC on all input files
fastqc $input_files --outdir=fastqc_output --threads 10


**** Mapping Hi-C Reads to the Genome Assembly

#!/bin/bash
#SBATCH --job-name=hic_mapping
#SBATCH --qos=xingbo.wu-b 
#SBATCH --ntasks=1
#SBATCH --mem=100G
#SBATCH --time=23:00:00
#SBATCH --cpus-per-task=14


# Load required modules
module load bwa
module load samtools

# Set paths to your input files and output directory
reference_genome="/blue/xingbo.wu/share/impatiens/impatiens/impatiens.p_ctg.fa"
R1="/blue/xingbo.wu/share/impatiens/213B_Wu_R1/Impatiens_S3_L003_R1_001.fastq.gz"
R2="/blue/xingbo.wu/share/impatiens/213B_Wu_R2/Impatiens_S3_L003_R2_001.fastq.gz"
output_dir="/blue/xingbo.wu/jinli/impatiens"

# Step 1: Index the reference genome
echo "Indexing reference genome..."
bwa index $reference_genome || { echo "BWA index failed"; exit 1; }

# Step 2: Map Hi-C reads to the reference genome
aligned_sam="$output_dir/hic_aligned.sam"
echo "Mapping reads to reference genome..."
bwa mem -t 16 $reference_genome $R1 $R2 > $aligned_sam || { echo "BWA mem failed"; exit 1; }

# Step 3: Convert SAM to BAM
aligned_bam="$output_dir/hic_aligned.bam"
echo "Converting SAM to BAM..."
samtools view -Sb $aligned_sam > $aligned_bam || { echo "SAM to BAM conversion failed"; exit 1; }

# Step 4: Sort the BAM file
sorted_bam="$output_dir/hic_aligned_sorted.bam"
echo "Sorting BAM file..."
samtools sort -@ 16 -o $sorted_bam $aligned_bam || { echo "BAM sorting failed"; exit 1; }

# Step 5: Mark duplicates
marked_duplicates_bam="$output_dir/hic_aligned_sorted_dedup.bam"
echo "Marking duplicates..."
samtools markdup -@ 16 $sorted_bam $marked_duplicates_bam || { echo "Duplicate marking failed"; exit 1; }

# Step 6: Index the final BAM file for downstream analysis
echo "Indexing final BAM file..."
samtools index $marked_duplicates_bam || { echo "BAM indexing failed"; exit 1; }

# Clean up intermediate files
echo "Cleaning up intermediate files..."
rm $aligned_sam $aligned_bam $sorted_bam

echo "Hi-C mapping completed successfully."



